public class Field{
  private String name;
  private int numberOfHexagons;
  private int[] hexagonsPerRow;
  private int mostHexagonsInSingleRow;
  private int numberOfRows;
  private int[] startPositionByRow:
  private Justification justification:
  private int player1BaseLocation;
  private int player2BaseLocation;
  private HexLink[] hexLinks;
  private MovementType[] validMovementTypes;
  
  //each hexLink needs to hold the origin and all destinations along with all allowed movement types for that destination
  public class hexLink{
    private int origin;
    private int[] destination;
    private MovementType[][] allowedMovementType;
  }


  public class FieldBuilder{
    public FieldBuilder(FieldDetails fieldDetails){
    
    }
  }
  
  public int getNumberOfHexagons(){
    return this.numberOfHexagons;
  }
  
  private static Boolean isValidHex(Field field, int hex){
    //0 based indexing
    return hex >=0 && hex < field.getNumberOfHexagons() - 1;
  }
  
  private static Boolean isValidMovementType(Field field, MovementType movementType){
    Boolean isValid = false;
    
    return isValid;
  }
  
  public static void setMovementPermissions_oneWay(Field field, int fromHex, int toHex, MovementType movementType) throws invalidHexException, invalidMovementTypeException{
    if(!isValidHex(field, fromHex) || !isValidHex(field, toHex)){
      throw new invalidHexException();
    }
    if(!isValidMovementType(field, movementType)){
      throw new invalidMovementTypeException();
    }
  }
  
  public static void setMovementPermissions_roundTrip(Field field, int fromHex, int toHex, MovementType movementType){
    setMovementPermissions_oneWay(field, fromHex, toHex, movementType);
    setMovementPermissions_oneWay(field, toHex, fromHex, movementType);
  }


}
